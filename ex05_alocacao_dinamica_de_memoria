/* Faça uma nova versão do programa anterior para exibir as seguintes informações 
a partir dos valores do vetor: 
i) mediana; 
ii) moda; 
iii) outliers (usando o método Z score); e
iv) agrupamento dos valores em primeiro, segundo e terceiro
quartil. O vetor deve ser alocado dinamicamente e manipulado por meio da 
aritmética de ponteiros. */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Função para calcular a média de um vetor de inteiros
double calcularMedia(int* vetor, int tamanho) {
    double soma = 0;
    for (int i = 0; i < tamanho; ++i) {
        soma += vetor[i];
    }
    return soma / tamanho;
}

// Função para calcular o desvio padrão de um vetor de inteiros
double calcularDesvioPadrao(int* vetor, int tamanho, double media) {
    double soma_quadrados = 0;
    for (int i = 0; i < tamanho; ++i) {
        soma_quadrados += pow(vetor[i] - media, 2);
    }
    return sqrt(soma_quadrados / tamanho);
}

// Função para calcular a mediana de um vetor de inteiros
double calcularMediana(int* vetor, int tamanho) {
    // Ordena o vetor
    for (int i = 0; i < tamanho - 1; ++i) {
        for (int j = 0; j < tamanho - i - 1; ++j) {
            if (vetor[j] > vetor[j + 1]) {
                // Troca os elementos se estiverem fora de ordem
                int temp = vetor[j];
                vetor[j] = vetor[j + 1];
                vetor[j + 1] = temp;
            }
        }
    }

    // Calcula a mediana
    if (tamanho % 2 == 0) {
        // Se o tamanho for par, média dos dois elementos centrais
        return (vetor[tamanho / 2 - 1] + vetor[tamanho / 2]) / 2.0;
    } else {
        // Se o tamanho for ímpar, o elemento central
        return vetor[tamanho / 2];
    }
}

// Função para calcular a moda de um vetor de inteiros
int calcularModa(int* vetor, int tamanho) {
    int moda = vetor[0];
    int frequencia = 1;
    int frequencia_maxima = 1;

    for (int i = 1; i < tamanho; ++i) {
        if (vetor[i] == vetor[i - 1]) {
            // Elemento atual igual ao anterior, incrementa a frequência
            ++frequencia;
        } else {
            // Elemento atual diferente do anterior, reinicia a frequência
            frequencia = 1;
        }

        // Atualiza a moda se a frequência atual for maior que a máxima
        if (frequencia > frequencia_maxima) {
            frequencia_maxima = frequencia;
            moda = vetor[i];
        }
    }

    return moda;
}

// Função para calcular o Z-score de um elemento em relação a um vetor
double calcularZScore(int elemento, int* vetor, int tamanho, double media, double desvio_padrao) {
    return (elemento - media) / desvio_padrao;
}

// Função para calcular o quartil de um vetor de inteiros
double calcularQuartil(int* vetor, int tamanho, int quartil) {
    int indice_quartil = quartil * tamanho / 4;
    if (tamanho % 4 == 0 || quartil == 2) {
        // Se o tamanho for múltiplo de 4 ou quartil for o segundo, média dos dois elementos centrais
        return (vetor[indice_quartil - 1] + vetor[indice_quartil]) / 2.0;
    } else {
        // Se o tamanho não for múltiplo de 4 e quartil não for o segundo, elemento central
        return vetor[indice_quartil];
    }
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    int* vetor = (int*)malloc(n * sizeof(int));
    if (vetor == NULL) {
        printf("Erro de alocação de memória.\n");
        return 1;
    }

    printf("Digite os elementos do vetor:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &vetor[i]);
    }

    // Calcula e exibe a mediana
    double mediana = calcularMediana(vetor, n);
    printf("Mediana: %.2lf\n", mediana);

    // Calcula e exibe a moda
    int moda = calcularModa(vetor, n);
    printf("Moda: %d\n", moda);

    // Calcula e exibe os Z-scores
    printf("Z-scores:\n");
    double media = calcularMedia(vetor, n);
    for (int i = 0; i < n; ++i) {
        double z_score = calcularZScore(vetor[i], vetor, n, media, calcularDesvioPadrao(vetor, n, media));
        printf("Elemento %d: %.2lf\n", vetor[i], z_score);
    }

    // Calcula e exibe os quartis
    printf("Quartis:\n");
    for (int i = 1; i <= 3; ++i) {
        double quartil = calcularQuartil(vetor, n, i);
        printf("Quartil %d: %.2lf\n", i, quartil);
    }

    free(vetor);
    return 0;
    
}
